/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.sinistral.s1.payments.paypal.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;


/**
 * The template details. Includes invoicer business information, invoice recipients, items, and configuration.
 */
@JsonPropertyOrder({
  TemplateInfo.JSON_PROPERTY_DETAIL,
  TemplateInfo.JSON_PROPERTY_INVOICER,
  TemplateInfo.JSON_PROPERTY_PRIMARY_RECIPIENTS,
  TemplateInfo.JSON_PROPERTY_ADDITIONAL_RECIPIENTS,
  TemplateInfo.JSON_PROPERTY_ITEMS,
  TemplateInfo.JSON_PROPERTY_CONFIGURATION,
  TemplateInfo.JSON_PROPERTY_AMOUNT,
  TemplateInfo.JSON_PROPERTY_DUE_AMOUNT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-21T16:02:23.639524-07:00[America/Los_Angeles]")
public class TemplateInfo {
  public static final String JSON_PROPERTY_DETAIL = "detail";
  private TemplateDetail detail;

  public static final String JSON_PROPERTY_INVOICER = "invoicer";
  private InvoicerInfo invoicer;

  public static final String JSON_PROPERTY_PRIMARY_RECIPIENTS = "primary_recipients";
  private List<RecipientInfo> primaryRecipients;

  public static final String JSON_PROPERTY_ADDITIONAL_RECIPIENTS = "additional_recipients";
  private List<String> additionalRecipients;

  public static final String JSON_PROPERTY_ITEMS = "items";
  private List<Item> items;

  public static final String JSON_PROPERTY_CONFIGURATION = "configuration";
  private TemplateConfiguration _configuration;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private AmountSummaryDetail amount;

  public static final String JSON_PROPERTY_DUE_AMOUNT = "due_amount";
  private Money dueAmount;

  public TemplateInfo() { 
  }

  public TemplateInfo detail(TemplateDetail detail) {
    this.detail = detail;
    return this;
  }

   /**
   * Get detail
   * @return detail
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DETAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TemplateDetail getDetail() {
    return detail;
  }


  @JsonProperty(JSON_PROPERTY_DETAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetail(TemplateDetail detail) {
    this.detail = detail;
  }


  public TemplateInfo invoicer(InvoicerInfo invoicer) {
    this.invoicer = invoicer;
    return this;
  }

   /**
   * Get invoicer
   * @return invoicer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOICER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InvoicerInfo getInvoicer() {
    return invoicer;
  }


  @JsonProperty(JSON_PROPERTY_INVOICER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvoicer(InvoicerInfo invoicer) {
    this.invoicer = invoicer;
  }


  public TemplateInfo primaryRecipients(List<RecipientInfo> primaryRecipients) {
    this.primaryRecipients = primaryRecipients;
    return this;
  }

  public TemplateInfo addPrimaryRecipientsItem(RecipientInfo primaryRecipientsItem) {
    if (this.primaryRecipients == null) {
      this.primaryRecipients = new ArrayList<>();
    }
    this.primaryRecipients.add(primaryRecipientsItem);
    return this;
  }

   /**
   * The billing and shipping information. Includes name, email, address, phone, and language.
   * @return primaryRecipients
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIMARY_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RecipientInfo> getPrimaryRecipients() {
    return primaryRecipients;
  }


  @JsonProperty(JSON_PROPERTY_PRIMARY_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrimaryRecipients(List<RecipientInfo> primaryRecipients) {
    this.primaryRecipients = primaryRecipients;
  }


  public TemplateInfo additionalRecipients(List<String> additionalRecipients) {
    this.additionalRecipients = additionalRecipients;
    return this;
  }

  public TemplateInfo addAdditionalRecipientsItem(String additionalRecipientsItem) {
    if (this.additionalRecipients == null) {
      this.additionalRecipients = new ArrayList<>();
    }
    this.additionalRecipients.add(additionalRecipientsItem);
    return this;
  }

   /**
   * An array of one or more CC: emails to which notifications are sent. If you omit this parameter, a notification is sent to all CC: email addresses that are part of the invoice.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Valid values are email addresses in the &#x60;additional_recipients&#x60; value associated with the invoice.&lt;/blockquote&gt;
   * @return additionalRecipients
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAdditionalRecipients() {
    return additionalRecipients;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalRecipients(List<String> additionalRecipients) {
    this.additionalRecipients = additionalRecipients;
  }


  public TemplateInfo items(List<Item> items) {
    this.items = items;
    return this;
  }

  public TemplateInfo addItemsItem(Item itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * An array of invoice line-item information.
   * @return items
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Item> getItems() {
    return items;
  }


  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItems(List<Item> items) {
    this.items = items;
  }


  public TemplateInfo _configuration(TemplateConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

   /**
   * Get _configuration
   * @return _configuration
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TemplateConfiguration getConfiguration() {
    return _configuration;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfiguration(TemplateConfiguration _configuration) {
    this._configuration = _configuration;
  }


  public TemplateInfo amount(AmountSummaryDetail amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AmountSummaryDetail getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(AmountSummaryDetail amount) {
    this.amount = amount;
  }


  public TemplateInfo dueAmount(Money dueAmount) {
    this.dueAmount = dueAmount;
    return this;
  }

   /**
   * Get dueAmount
   * @return dueAmount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DUE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getDueAmount() {
    return dueAmount;
  }


  @JsonProperty(JSON_PROPERTY_DUE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDueAmount(Money dueAmount) {
    this.dueAmount = dueAmount;
  }


  /**
   * Return true if this template_info object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateInfo templateInfo = (TemplateInfo) o;
    return Objects.equals(this.detail, templateInfo.detail) &&
        Objects.equals(this.invoicer, templateInfo.invoicer) &&
        Objects.equals(this.primaryRecipients, templateInfo.primaryRecipients) &&
        Objects.equals(this.additionalRecipients, templateInfo.additionalRecipients) &&
        Objects.equals(this.items, templateInfo.items) &&
        Objects.equals(this._configuration, templateInfo._configuration) &&
        Objects.equals(this.amount, templateInfo.amount) &&
        Objects.equals(this.dueAmount, templateInfo.dueAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detail, invoicer, primaryRecipients, additionalRecipients, items, _configuration, amount, dueAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateInfo {\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    invoicer: ").append(toIndentedString(invoicer)).append("\n");
    sb.append("    primaryRecipients: ").append(toIndentedString(primaryRecipients)).append("\n");
    sb.append("    additionalRecipients: ").append(toIndentedString(additionalRecipients)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    dueAmount: ").append(toIndentedString(dueAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `detail` to the URL query string
    if (getDetail() != null) {
      joiner.add(getDetail().toUrlQueryString(prefix + "detail" + suffix));
    }

    // add `invoicer` to the URL query string
    if (getInvoicer() != null) {
      joiner.add(getInvoicer().toUrlQueryString(prefix + "invoicer" + suffix));
    }

    // add `primary_recipients` to the URL query string
    if (getPrimaryRecipients() != null) {
      for (int i = 0; i < getPrimaryRecipients().size(); i++) {
        if (getPrimaryRecipients().get(i) != null) {
          joiner.add(getPrimaryRecipients().get(i).toUrlQueryString(String.format("%sprimary_recipients%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `additional_recipients` to the URL query string
    if (getAdditionalRecipients() != null) {
      for (int i = 0; i < getAdditionalRecipients().size(); i++) {
        joiner.add(String.format("%sadditional_recipients%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getAdditionalRecipients().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `items` to the URL query string
    if (getItems() != null) {
      for (int i = 0; i < getItems().size(); i++) {
        if (getItems().get(i) != null) {
          joiner.add(getItems().get(i).toUrlQueryString(String.format("%sitems%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `configuration` to the URL query string
    if (getConfiguration() != null) {
      joiner.add(getConfiguration().toUrlQueryString(prefix + "configuration" + suffix));
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      joiner.add(getAmount().toUrlQueryString(prefix + "amount" + suffix));
    }

    // add `due_amount` to the URL query string
    if (getDueAmount() != null) {
      joiner.add(getDueAmount().toUrlQueryString(prefix + "due_amount" + suffix));
    }

    return joiner.toString();
  }
}

