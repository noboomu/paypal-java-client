/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.sinistral.s1.payments.paypal.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;


/**
 * An array of invoice line item information. The maximum items for an invoice is &#x60;100&#x60;.
 */
@JsonPropertyOrder({
  Item.JSON_PROPERTY_ID,
  Item.JSON_PROPERTY_NAME,
  Item.JSON_PROPERTY_DESCRIPTION,
  Item.JSON_PROPERTY_QUANTITY,
  Item.JSON_PROPERTY_UNIT_AMOUNT,
  Item.JSON_PROPERTY_TAX,
  Item.JSON_PROPERTY_ITEM_DATE,
  Item.JSON_PROPERTY_DISCOUNT,
  Item.JSON_PROPERTY_UNIT_OF_MEASURE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-21T16:02:23.639524-07:00[America/Los_Angeles]")
public class Item {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  private String quantity;

  public static final String JSON_PROPERTY_UNIT_AMOUNT = "unit_amount";
  private Money unitAmount;

  public static final String JSON_PROPERTY_TAX = "tax";
  private Tax tax;

  public static final String JSON_PROPERTY_ITEM_DATE = "item_date";
  private String itemDate;

  public static final String JSON_PROPERTY_DISCOUNT = "discount";
  private Discount discount;

  public static final String JSON_PROPERTY_UNIT_OF_MEASURE = "unit_of_measure";
  private UnitOfMeasure unitOfMeasure;

  public Item() { 
  }

  @JsonCreator
  public Item(
    @JsonProperty(JSON_PROPERTY_ID) String id
  ) {
  this();
    this.id = id;
  }

   /**
   * The ID of the invoice line item.
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




  public Item name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The item name for the invoice line item.
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Item description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The item description for the invoice line item.
   * @return description
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public Item quantity(String quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity of the item that the invoicer provides to the payer. Value is from &#x60;-1000000&#x60; to &#x60;1000000&#x60;. Supports up to five decimal places.
   * @return quantity
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getQuantity() {
    return quantity;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuantity(String quantity) {
    this.quantity = quantity;
  }


  public Item unitAmount(Money unitAmount) {
    this.unitAmount = unitAmount;
    return this;
  }

   /**
   * Get unitAmount
   * @return unitAmount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UNIT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Money getUnitAmount() {
    return unitAmount;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnitAmount(Money unitAmount) {
    this.unitAmount = unitAmount;
  }


  public Item tax(Tax tax) {
    this.tax = tax;
    return this;
  }

   /**
   * Get tax
   * @return tax
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Tax getTax() {
    return tax;
  }


  @JsonProperty(JSON_PROPERTY_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTax(Tax tax) {
    this.tax = tax;
  }


  public Item itemDate(String itemDate) {
    this.itemDate = itemDate;
    return this;
  }

   /**
   * The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard &#x60;date_time&#x60; type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
   * @return itemDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ITEM_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getItemDate() {
    return itemDate;
  }


  @JsonProperty(JSON_PROPERTY_ITEM_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItemDate(String itemDate) {
    this.itemDate = itemDate;
  }


  public Item discount(Discount discount) {
    this.discount = discount;
    return this;
  }

   /**
   * Get discount
   * @return discount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Discount getDiscount() {
    return discount;
  }


  @JsonProperty(JSON_PROPERTY_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiscount(Discount discount) {
    this.discount = discount;
  }


  public Item unitOfMeasure(UnitOfMeasure unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
    return this;
  }

   /**
   * Get unitOfMeasure
   * @return unitOfMeasure
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UnitOfMeasure getUnitOfMeasure() {
    return unitOfMeasure;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnitOfMeasure(UnitOfMeasure unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
  }


  /**
   * Return true if this item object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Item item = (Item) o;
    return Objects.equals(this.id, item.id) &&
        Objects.equals(this.name, item.name) &&
        Objects.equals(this.description, item.description) &&
        Objects.equals(this.quantity, item.quantity) &&
        Objects.equals(this.unitAmount, item.unitAmount) &&
        Objects.equals(this.tax, item.tax) &&
        Objects.equals(this.itemDate, item.itemDate) &&
        Objects.equals(this.discount, item.discount) &&
        Objects.equals(this.unitOfMeasure, item.unitOfMeasure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, quantity, unitAmount, tax, itemDate, discount, unitOfMeasure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Item {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    unitAmount: ").append(toIndentedString(unitAmount)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    itemDate: ").append(toIndentedString(itemDate)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `quantity` to the URL query string
    if (getQuantity() != null) {
      joiner.add(String.format("%squantity%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getQuantity()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `unit_amount` to the URL query string
    if (getUnitAmount() != null) {
      joiner.add(getUnitAmount().toUrlQueryString(prefix + "unit_amount" + suffix));
    }

    // add `tax` to the URL query string
    if (getTax() != null) {
      joiner.add(getTax().toUrlQueryString(prefix + "tax" + suffix));
    }

    // add `item_date` to the URL query string
    if (getItemDate() != null) {
      joiner.add(String.format("%sitem_date%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getItemDate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `discount` to the URL query string
    if (getDiscount() != null) {
      joiner.add(getDiscount().toUrlQueryString(prefix + "discount" + suffix));
    }

    // add `unit_of_measure` to the URL query string
    if (getUnitOfMeasure() != null) {
      joiner.add(String.format("%sunit_of_measure%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUnitOfMeasure()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

