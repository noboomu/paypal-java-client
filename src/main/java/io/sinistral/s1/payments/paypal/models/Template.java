/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.sinistral.s1.payments.paypal.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;


/**
 * The template with invoice details to load with all captured fields.
 */
@JsonPropertyOrder({
  Template.JSON_PROPERTY_ID,
  Template.JSON_PROPERTY_NAME,
  Template.JSON_PROPERTY_DEFAULT_TEMPLATE,
  Template.JSON_PROPERTY_TEMPLATE_INFO,
  Template.JSON_PROPERTY_SETTINGS,
  Template.JSON_PROPERTY_UNIT_OF_MEASURE,
  Template.JSON_PROPERTY_STANDARD_TEMPLATE,
  Template.JSON_PROPERTY_LINKS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-21T16:02:23.639524-07:00[America/Los_Angeles]")
public class Template {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DEFAULT_TEMPLATE = "default_template";
  private Boolean defaultTemplate;

  public static final String JSON_PROPERTY_TEMPLATE_INFO = "template_info";
  private TemplateInfo templateInfo;

  public static final String JSON_PROPERTY_SETTINGS = "settings";
  private TemplateSettings settings;

  public static final String JSON_PROPERTY_UNIT_OF_MEASURE = "unit_of_measure";
  private UnitOfMeasure unitOfMeasure;

  public static final String JSON_PROPERTY_STANDARD_TEMPLATE = "standard_template";
  private Boolean standardTemplate;

  public static final String JSON_PROPERTY_LINKS = "links";
  private List<LinkDescription> links;

  public Template() { 
  }

  @JsonCreator
  public Template(
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_STANDARD_TEMPLATE) Boolean standardTemplate, 
    @JsonProperty(JSON_PROPERTY_LINKS) List<LinkDescription> links
  ) {
  this();
    this.id = id;
    this.standardTemplate = standardTemplate;
    this.links = links;
  }

   /**
   * The ID of the template.
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




  public Template name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The template name.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; The template name must be unique.&lt;/blockquote&gt;
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Template defaultTemplate(Boolean defaultTemplate) {
    this.defaultTemplate = defaultTemplate;
    return this;
  }

   /**
   * Indicates whether this template is the default template. A invoicer can have one default template.
   * @return defaultTemplate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDefaultTemplate() {
    return defaultTemplate;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultTemplate(Boolean defaultTemplate) {
    this.defaultTemplate = defaultTemplate;
  }


  public Template templateInfo(TemplateInfo templateInfo) {
    this.templateInfo = templateInfo;
    return this;
  }

   /**
   * Get templateInfo
   * @return templateInfo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMPLATE_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TemplateInfo getTemplateInfo() {
    return templateInfo;
  }


  @JsonProperty(JSON_PROPERTY_TEMPLATE_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemplateInfo(TemplateInfo templateInfo) {
    this.templateInfo = templateInfo;
  }


  public Template settings(TemplateSettings settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TemplateSettings getSettings() {
    return settings;
  }


  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSettings(TemplateSettings settings) {
    this.settings = settings;
  }


  public Template unitOfMeasure(UnitOfMeasure unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
    return this;
  }

   /**
   * Get unitOfMeasure
   * @return unitOfMeasure
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UnitOfMeasure getUnitOfMeasure() {
    return unitOfMeasure;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnitOfMeasure(UnitOfMeasure unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
  }


   /**
   * Indicates whether this template is a invoicer-created custom template. The system generates non-custom templates.
   * @return standardTemplate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STANDARD_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getStandardTemplate() {
    return standardTemplate;
  }




   /**
   * An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
   * @return links
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<LinkDescription> getLinks() {
    return links;
  }




  /**
   * Return true if this template object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Template template = (Template) o;
    return Objects.equals(this.id, template.id) &&
        Objects.equals(this.name, template.name) &&
        Objects.equals(this.defaultTemplate, template.defaultTemplate) &&
        Objects.equals(this.templateInfo, template.templateInfo) &&
        Objects.equals(this.settings, template.settings) &&
        Objects.equals(this.unitOfMeasure, template.unitOfMeasure) &&
        Objects.equals(this.standardTemplate, template.standardTemplate) &&
        Objects.equals(this.links, template.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, defaultTemplate, templateInfo, settings, unitOfMeasure, standardTemplate, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Template {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    defaultTemplate: ").append(toIndentedString(defaultTemplate)).append("\n");
    sb.append("    templateInfo: ").append(toIndentedString(templateInfo)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("    standardTemplate: ").append(toIndentedString(standardTemplate)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `default_template` to the URL query string
    if (getDefaultTemplate() != null) {
      joiner.add(String.format("%sdefault_template%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDefaultTemplate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `template_info` to the URL query string
    if (getTemplateInfo() != null) {
      joiner.add(getTemplateInfo().toUrlQueryString(prefix + "template_info" + suffix));
    }

    // add `settings` to the URL query string
    if (getSettings() != null) {
      joiner.add(getSettings().toUrlQueryString(prefix + "settings" + suffix));
    }

    // add `unit_of_measure` to the URL query string
    if (getUnitOfMeasure() != null) {
      joiner.add(String.format("%sunit_of_measure%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUnitOfMeasure()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `standard_template` to the URL query string
    if (getStandardTemplate() != null) {
      joiner.add(String.format("%sstandard_template%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStandardTemplate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `links` to the URL query string
    if (getLinks() != null) {
      for (int i = 0; i < getLinks().size(); i++) {
        if (getLinks().get(i) != null) {
          joiner.add(getLinks().get(i).toUrlQueryString(String.format("%slinks%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

