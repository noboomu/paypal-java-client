/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.sinistral.s1.payments.paypal.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.Objects;
import java.util.StringJoiner;


/**
 * The breakdown of the amount. Includes total item amount, total tax amount, custom amount, and shipping and discounts, if any.
 */
@JsonPropertyOrder({
  AmountWithBreakdown.JSON_PROPERTY_ITEM_TOTAL,
  AmountWithBreakdown.JSON_PROPERTY_DISCOUNT,
  AmountWithBreakdown.JSON_PROPERTY_TAX_TOTAL,
  AmountWithBreakdown.JSON_PROPERTY_SHIPPING,
  AmountWithBreakdown.JSON_PROPERTY_CUSTOM
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-21T16:02:23.639524-07:00[America/Los_Angeles]")
public class AmountWithBreakdown {
  public static final String JSON_PROPERTY_ITEM_TOTAL = "item_total";
  private Money itemTotal;

  public static final String JSON_PROPERTY_DISCOUNT = "discount";
  private AggregatedDiscount discount;

  public static final String JSON_PROPERTY_TAX_TOTAL = "tax_total";
  private Money taxTotal;

  public static final String JSON_PROPERTY_SHIPPING = "shipping";
  private ShippingCost shipping;

  public static final String JSON_PROPERTY_CUSTOM = "custom";
  private CustomAmount custom;

  public AmountWithBreakdown() { 
  }

  public AmountWithBreakdown itemTotal(Money itemTotal) {
    this.itemTotal = itemTotal;
    return this;
  }

   /**
   * Get itemTotal
   * @return itemTotal
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ITEM_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getItemTotal() {
    return itemTotal;
  }


  @JsonProperty(JSON_PROPERTY_ITEM_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItemTotal(Money itemTotal) {
    this.itemTotal = itemTotal;
  }


  public AmountWithBreakdown discount(AggregatedDiscount discount) {
    this.discount = discount;
    return this;
  }

   /**
   * Get discount
   * @return discount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AggregatedDiscount getDiscount() {
    return discount;
  }


  @JsonProperty(JSON_PROPERTY_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiscount(AggregatedDiscount discount) {
    this.discount = discount;
  }


  public AmountWithBreakdown taxTotal(Money taxTotal) {
    this.taxTotal = taxTotal;
    return this;
  }

   /**
   * Get taxTotal
   * @return taxTotal
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getTaxTotal() {
    return taxTotal;
  }


  @JsonProperty(JSON_PROPERTY_TAX_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxTotal(Money taxTotal) {
    this.taxTotal = taxTotal;
  }


  public AmountWithBreakdown shipping(ShippingCost shipping) {
    this.shipping = shipping;
    return this;
  }

   /**
   * Get shipping
   * @return shipping
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ShippingCost getShipping() {
    return shipping;
  }


  @JsonProperty(JSON_PROPERTY_SHIPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShipping(ShippingCost shipping) {
    this.shipping = shipping;
  }


  public AmountWithBreakdown custom(CustomAmount custom) {
    this.custom = custom;
    return this;
  }

   /**
   * Get custom
   * @return custom
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CustomAmount getCustom() {
    return custom;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustom(CustomAmount custom) {
    this.custom = custom;
  }


  /**
   * Return true if this amount_with_breakdown object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmountWithBreakdown amountWithBreakdown = (AmountWithBreakdown) o;
    return Objects.equals(this.itemTotal, amountWithBreakdown.itemTotal) &&
        Objects.equals(this.discount, amountWithBreakdown.discount) &&
        Objects.equals(this.taxTotal, amountWithBreakdown.taxTotal) &&
        Objects.equals(this.shipping, amountWithBreakdown.shipping) &&
        Objects.equals(this.custom, amountWithBreakdown.custom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemTotal, discount, taxTotal, shipping, custom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmountWithBreakdown {\n");
    sb.append("    itemTotal: ").append(toIndentedString(itemTotal)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    taxTotal: ").append(toIndentedString(taxTotal)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `item_total` to the URL query string
    if (getItemTotal() != null) {
      joiner.add(getItemTotal().toUrlQueryString(prefix + "item_total" + suffix));
    }

    // add `discount` to the URL query string
    if (getDiscount() != null) {
      joiner.add(getDiscount().toUrlQueryString(prefix + "discount" + suffix));
    }

    // add `tax_total` to the URL query string
    if (getTaxTotal() != null) {
      joiner.add(getTaxTotal().toUrlQueryString(prefix + "tax_total" + suffix));
    }

    // add `shipping` to the URL query string
    if (getShipping() != null) {
      joiner.add(getShipping().toUrlQueryString(prefix + "shipping" + suffix));
    }

    // add `custom` to the URL query string
    if (getCustom() != null) {
      joiner.add(getCustom().toUrlQueryString(prefix + "custom" + suffix));
    }

    return joiner.toString();
  }
}

