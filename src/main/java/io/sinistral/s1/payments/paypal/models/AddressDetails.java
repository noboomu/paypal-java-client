/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.sinistral.s1.payments.paypal.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;


/**
 * The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.&lt;br/&gt;For example, &#x60;address_portable.address_line_1&#x60; is usually a combination of &#x60;address_details.street_number&#x60;, &#x60;street_name&#x60;, and &#x60;street_type&#x60;.
 */
@JsonPropertyOrder({
  AddressDetails.JSON_PROPERTY_STREET_NUMBER,
  AddressDetails.JSON_PROPERTY_STREET_NAME,
  AddressDetails.JSON_PROPERTY_STREET_TYPE,
  AddressDetails.JSON_PROPERTY_DELIVERY_SERVICE,
  AddressDetails.JSON_PROPERTY_BUILDING_NAME,
  AddressDetails.JSON_PROPERTY_SUB_BUILDING
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-21T16:02:23.639524-07:00[America/Los_Angeles]")
public class AddressDetails {
  public static final String JSON_PROPERTY_STREET_NUMBER = "street_number";
  private String streetNumber;

  public static final String JSON_PROPERTY_STREET_NAME = "street_name";
  private String streetName;

  public static final String JSON_PROPERTY_STREET_TYPE = "street_type";
  private String streetType;

  public static final String JSON_PROPERTY_DELIVERY_SERVICE = "delivery_service";
  private String deliveryService;

  public static final String JSON_PROPERTY_BUILDING_NAME = "building_name";
  private String buildingName;

  public static final String JSON_PROPERTY_SUB_BUILDING = "sub_building";
  private String subBuilding;

  public AddressDetails() { 
  }

  public AddressDetails streetNumber(String streetNumber) {
    this.streetNumber = streetNumber;
    return this;
  }

   /**
   * The street number.
   * @return streetNumber
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STREET_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStreetNumber() {
    return streetNumber;
  }


  @JsonProperty(JSON_PROPERTY_STREET_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStreetNumber(String streetNumber) {
    this.streetNumber = streetNumber;
  }


  public AddressDetails streetName(String streetName) {
    this.streetName = streetName;
    return this;
  }

   /**
   * The street name. Just &#x60;Drury&#x60; in &#x60;Drury Lane&#x60;.
   * @return streetName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STREET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStreetName() {
    return streetName;
  }


  @JsonProperty(JSON_PROPERTY_STREET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStreetName(String streetName) {
    this.streetName = streetName;
  }


  public AddressDetails streetType(String streetType) {
    this.streetType = streetType;
    return this;
  }

   /**
   * The street type. For example, avenue, boulevard, road, or expressway.
   * @return streetType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STREET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStreetType() {
    return streetType;
  }


  @JsonProperty(JSON_PROPERTY_STREET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStreetType(String streetType) {
    this.streetType = streetType;
  }


  public AddressDetails deliveryService(String deliveryService) {
    this.deliveryService = deliveryService;
    return this;
  }

   /**
   * The delivery service. Post office box, bag number, or post office name.
   * @return deliveryService
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELIVERY_SERVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDeliveryService() {
    return deliveryService;
  }


  @JsonProperty(JSON_PROPERTY_DELIVERY_SERVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeliveryService(String deliveryService) {
    this.deliveryService = deliveryService;
  }


  public AddressDetails buildingName(String buildingName) {
    this.buildingName = buildingName;
    return this;
  }

   /**
   * A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, &lt;code&gt;Craven House&lt;/code&gt;.
   * @return buildingName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUILDING_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBuildingName() {
    return buildingName;
  }


  @JsonProperty(JSON_PROPERTY_BUILDING_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildingName(String buildingName) {
    this.buildingName = buildingName;
  }


  public AddressDetails subBuilding(String subBuilding) {
    this.subBuilding = subBuilding;
    return this;
  }

   /**
   * The first-order entity below a named building or location that represents the sub-premise. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment.
   * @return subBuilding
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUB_BUILDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubBuilding() {
    return subBuilding;
  }


  @JsonProperty(JSON_PROPERTY_SUB_BUILDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubBuilding(String subBuilding) {
    this.subBuilding = subBuilding;
  }


  /**
   * Return true if this Address_Details object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressDetails addressDetails = (AddressDetails) o;
    return Objects.equals(this.streetNumber, addressDetails.streetNumber) &&
        Objects.equals(this.streetName, addressDetails.streetName) &&
        Objects.equals(this.streetType, addressDetails.streetType) &&
        Objects.equals(this.deliveryService, addressDetails.deliveryService) &&
        Objects.equals(this.buildingName, addressDetails.buildingName) &&
        Objects.equals(this.subBuilding, addressDetails.subBuilding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streetNumber, streetName, streetType, deliveryService, buildingName, subBuilding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressDetails {\n");
    sb.append("    streetNumber: ").append(toIndentedString(streetNumber)).append("\n");
    sb.append("    streetName: ").append(toIndentedString(streetName)).append("\n");
    sb.append("    streetType: ").append(toIndentedString(streetType)).append("\n");
    sb.append("    deliveryService: ").append(toIndentedString(deliveryService)).append("\n");
    sb.append("    buildingName: ").append(toIndentedString(buildingName)).append("\n");
    sb.append("    subBuilding: ").append(toIndentedString(subBuilding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `street_number` to the URL query string
    if (getStreetNumber() != null) {
      joiner.add(String.format("%sstreet_number%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStreetNumber()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `street_name` to the URL query string
    if (getStreetName() != null) {
      joiner.add(String.format("%sstreet_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStreetName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `street_type` to the URL query string
    if (getStreetType() != null) {
      joiner.add(String.format("%sstreet_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStreetType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `delivery_service` to the URL query string
    if (getDeliveryService() != null) {
      joiner.add(String.format("%sdelivery_service%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDeliveryService()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `building_name` to the URL query string
    if (getBuildingName() != null) {
      joiner.add(String.format("%sbuilding_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBuildingName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `sub_building` to the URL query string
    if (getSubBuilding() != null) {
      joiner.add(String.format("%ssub_building%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubBuilding()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

