/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.sinistral.s1.payments.paypal.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;


/**
 * The email or SMS notification to send to the invoicer or payer on sending an invoice.
 */
@JsonPropertyOrder({
  Notification.JSON_PROPERTY_SUBJECT,
  Notification.JSON_PROPERTY_NOTE,
  Notification.JSON_PROPERTY_SEND_TO_INVOICER,
  Notification.JSON_PROPERTY_SEND_TO_RECIPIENT,
  Notification.JSON_PROPERTY_ADDITIONAL_RECIPIENTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-21T16:02:23.639524-07:00[America/Los_Angeles]")
public class Notification {
  public static final String JSON_PROPERTY_SUBJECT = "subject";
  private String subject;

  public static final String JSON_PROPERTY_NOTE = "note";
  private String note;

  public static final String JSON_PROPERTY_SEND_TO_INVOICER = "send_to_invoicer";
  private Boolean sendToInvoicer = false;

  public static final String JSON_PROPERTY_SEND_TO_RECIPIENT = "send_to_recipient";
  private Boolean sendToRecipient = true;

  public static final String JSON_PROPERTY_ADDITIONAL_RECIPIENTS = "additional_recipients";
  private List<String> additionalRecipients;

  public Notification() { 
  }

  public Notification subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * The subject of the email that is sent as a notification to the recipient.
   * @return subject
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubject(String subject) {
    this.subject = subject;
  }


  public Notification note(String note) {
    this.note = note;
    return this;
  }

   /**
   * A note to the payer.
   * @return note
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNote() {
    return note;
  }


  @JsonProperty(JSON_PROPERTY_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNote(String note) {
    this.note = note;
  }


  public Notification sendToInvoicer(Boolean sendToInvoicer) {
    this.sendToInvoicer = sendToInvoicer;
    return this;
  }

   /**
   * Indicates whether to send a copy of the email to the merchant.
   * @return sendToInvoicer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEND_TO_INVOICER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSendToInvoicer() {
    return sendToInvoicer;
  }


  @JsonProperty(JSON_PROPERTY_SEND_TO_INVOICER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSendToInvoicer(Boolean sendToInvoicer) {
    this.sendToInvoicer = sendToInvoicer;
  }


  public Notification sendToRecipient(Boolean sendToRecipient) {
    this.sendToRecipient = sendToRecipient;
    return this;
  }

   /**
   * Indicates whether to send a copy of the email to the recipient.
   * @return sendToRecipient
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEND_TO_RECIPIENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSendToRecipient() {
    return sendToRecipient;
  }


  @JsonProperty(JSON_PROPERTY_SEND_TO_RECIPIENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSendToRecipient(Boolean sendToRecipient) {
    this.sendToRecipient = sendToRecipient;
  }


  public Notification additionalRecipients(List<String> additionalRecipients) {
    this.additionalRecipients = additionalRecipients;
    return this;
  }

  public Notification addAdditionalRecipientsItem(String additionalRecipientsItem) {
    if (this.additionalRecipients == null) {
      this.additionalRecipients = new ArrayList<>();
    }
    this.additionalRecipients.add(additionalRecipientsItem);
    return this;
  }

   /**
   * An array of one or more CC: emails to which notifications are sent. If you omit this parameter, a notification is sent to all CC: email addresses that are part of the invoice.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Valid values are email addresses in the &#x60;additional_recipients&#x60; value associated with the invoice.&lt;/blockquote&gt;
   * @return additionalRecipients
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAdditionalRecipients() {
    return additionalRecipients;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalRecipients(List<String> additionalRecipients) {
    this.additionalRecipients = additionalRecipients;
  }


  /**
   * Return true if this notification object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Notification notification = (Notification) o;
    return Objects.equals(this.subject, notification.subject) &&
        Objects.equals(this.note, notification.note) &&
        Objects.equals(this.sendToInvoicer, notification.sendToInvoicer) &&
        Objects.equals(this.sendToRecipient, notification.sendToRecipient) &&
        Objects.equals(this.additionalRecipients, notification.additionalRecipients);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subject, note, sendToInvoicer, sendToRecipient, additionalRecipients);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Notification {\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    sendToInvoicer: ").append(toIndentedString(sendToInvoicer)).append("\n");
    sb.append("    sendToRecipient: ").append(toIndentedString(sendToRecipient)).append("\n");
    sb.append("    additionalRecipients: ").append(toIndentedString(additionalRecipients)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `subject` to the URL query string
    if (getSubject() != null) {
      joiner.add(String.format("%ssubject%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubject()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `note` to the URL query string
    if (getNote() != null) {
      joiner.add(String.format("%snote%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNote()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `send_to_invoicer` to the URL query string
    if (getSendToInvoicer() != null) {
      joiner.add(String.format("%ssend_to_invoicer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSendToInvoicer()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `send_to_recipient` to the URL query string
    if (getSendToRecipient() != null) {
      joiner.add(String.format("%ssend_to_recipient%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSendToRecipient()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `additional_recipients` to the URL query string
    if (getAdditionalRecipients() != null) {
      for (int i = 0; i < getAdditionalRecipients().size(); i++) {
        joiner.add(String.format("%sadditional_recipients%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getAdditionalRecipients().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

