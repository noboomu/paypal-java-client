/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.sinistral.s1.payments.paypal.models;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import io.sinistral.s1.payments.paypal.core.JSON;

import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-21T16:02:23.639524-07:00[America/Los_Angeles]")
@JsonDeserialize(using = ErrorDefault.ErrorDefaultDeserializer.class)
@JsonSerialize(using = ErrorDefault.ErrorDefaultSerializer.class)
public class ErrorDefault extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ErrorDefault.class.getName());

    public static class ErrorDefaultSerializer extends StdSerializer<ErrorDefault> {
        public ErrorDefaultSerializer(Class<ErrorDefault> t) {
            super(t);
        }

        public ErrorDefaultSerializer() {
            this(null);
        }

        @Override
        public void serialize(ErrorDefault value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class ErrorDefaultDeserializer extends StdDeserializer<ErrorDefault> {
        public ErrorDefaultDeserializer() {
            this(ErrorDefault.class);
        }

        public ErrorDefaultDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public ErrorDefault deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize Error
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (Error.class.equals(Integer.class) || Error.class.equals(Long.class) || Error.class.equals(Float.class) || Error.class.equals(Double.class) || Error.class.equals(Boolean.class) || Error.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((Error.class.equals(Integer.class) || Error.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((Error.class.equals(Float.class) || Error.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (Error.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (Error.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(Error.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'Error'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'Error'", e);
            }



            if (match == 1) {
                ErrorDefault ret = new ErrorDefault();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for ErrorDefault: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public ErrorDefault getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "ErrorDefault cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<>();

    public ErrorDefault() {
        super("oneOf", Boolean.FALSE);
    }

    public ErrorDefault(Error o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

   

    static {
        schemas.put("Error", Error.class); 
        JSON.registerDescendants(ErrorDefault.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ErrorDefault.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * Error, Error401, Error403, Error404, Error409, Error415, Error422, Error500, Error503
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(Error.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

      

        throw new RuntimeException("Invalid instance type. Must be Error, Error401, Error403, Error404, Error409, Error415, Error422, Error500, Error503");
    }

    /**
     * Get the actual instance, which can be the following:
     * Error, Error401, Error403, Error404, Error409, Error415, Error422, Error500, Error503
     *
     * @return The actual instance (Error, Error401, Error403, Error404, Error409, Error415, Error422, Error500, Error503)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Error`. If the actual instance is not `Error`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Error`
     * @throws ClassCastException if the instance is not `Error`
     */
    public Error getError() throws ClassCastException {
        return (Error)super.getActualInstance();
    }

    

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    if (getActualInstance() instanceof Error) {
        if (getActualInstance() != null) {
          joiner.add(((Error)getActualInstance()).toUrlQueryString(prefix + "one_of_0" + suffix));
        }
        return joiner.toString();
    }
    return null;
  }

}

