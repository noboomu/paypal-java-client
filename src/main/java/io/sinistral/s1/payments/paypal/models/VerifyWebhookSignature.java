/*
 * Webhooks Management
 * The PayPal REST APIs use <a href=\"/docs/api/notifications/webhooks/\"/>webhooks</a> for event notification. Webhooks are HTTP callbacks that receive notification messages for events. After you configure a webhook listener for your app, you can <a href=\"#webhooks_create\">create a webhook</a>, which subscribes the webhook listener for your app to events. The <code>notifications</code> namespace contains resource collections for webhooks.
 *
 * The version of the OpenAPI document: 1.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.sinistral.s1.payments.paypal.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.sinistral.s1.payments.paypal.models.Event;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A verify webhook signature request.
 */
@JsonPropertyOrder({
  VerifyWebhookSignature.JSON_PROPERTY_AUTH_ALGO,
  VerifyWebhookSignature.JSON_PROPERTY_CERT_URL,
  VerifyWebhookSignature.JSON_PROPERTY_TRANSMISSION_ID,
  VerifyWebhookSignature.JSON_PROPERTY_TRANSMISSION_SIG,
  VerifyWebhookSignature.JSON_PROPERTY_TRANSMISSION_TIME,
  VerifyWebhookSignature.JSON_PROPERTY_WEBHOOK_ID,
  VerifyWebhookSignature.JSON_PROPERTY_WEBHOOK_EVENT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-31T16:12:53.797730072-07:00[America/Los_Angeles]")
public class VerifyWebhookSignature {
  public static final String JSON_PROPERTY_AUTH_ALGO = "auth_algo";
  private String authAlgo;

  public static final String JSON_PROPERTY_CERT_URL = "cert_url";
  private URI certUrl;

  public static final String JSON_PROPERTY_TRANSMISSION_ID = "transmission_id";
  private String transmissionId;

  public static final String JSON_PROPERTY_TRANSMISSION_SIG = "transmission_sig";
  private String transmissionSig;

  public static final String JSON_PROPERTY_TRANSMISSION_TIME = "transmission_time";
  private OffsetDateTime transmissionTime;

  public static final String JSON_PROPERTY_WEBHOOK_ID = "webhook_id";
  private String webhookId;

  public static final String JSON_PROPERTY_WEBHOOK_EVENT = "webhook_event";
  private Event webhookEvent;

  public VerifyWebhookSignature() { 
  }

  public VerifyWebhookSignature authAlgo(String authAlgo) {
    this.authAlgo = authAlgo;
    return this;
  }

   /**
   * The algorithm that PayPal uses to generate the signature and that you can use to verify the signature. Extract this value from the &#x60;PAYPAL-AUTH-ALGO&#x60; response header, which is received with the webhook notification.
   * @return authAlgo
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTH_ALGO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAuthAlgo() {
    return authAlgo;
  }


  @JsonProperty(JSON_PROPERTY_AUTH_ALGO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAuthAlgo(String authAlgo) {
    this.authAlgo = authAlgo;
  }


  public VerifyWebhookSignature certUrl(URI certUrl) {
    this.certUrl = certUrl;
    return this;
  }

   /**
   * The X.509 public key certificate. Download the certificate from this URL and use it to verify the signature. Extract this value from the &#x60;PAYPAL-CERT-URL&#x60; response header, which is received with the webhook notification.
   * @return certUrl
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CERT_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getCertUrl() {
    return certUrl;
  }


  @JsonProperty(JSON_PROPERTY_CERT_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCertUrl(URI certUrl) {
    this.certUrl = certUrl;
  }


  public VerifyWebhookSignature transmissionId(String transmissionId) {
    this.transmissionId = transmissionId;
    return this;
  }

   /**
   * The ID of the HTTP transmission. Contained in the &#x60;PAYPAL-TRANSMISSION-ID&#x60; header of the notification message.
   * @return transmissionId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANSMISSION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTransmissionId() {
    return transmissionId;
  }


  @JsonProperty(JSON_PROPERTY_TRANSMISSION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransmissionId(String transmissionId) {
    this.transmissionId = transmissionId;
  }


  public VerifyWebhookSignature transmissionSig(String transmissionSig) {
    this.transmissionSig = transmissionSig;
    return this;
  }

   /**
   * The PayPal-generated asymmetric signature. Appears in the &#x60;PAYPAL-TRANSMISSION-SIG&#x60; header of the notification message.
   * @return transmissionSig
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANSMISSION_SIG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTransmissionSig() {
    return transmissionSig;
  }


  @JsonProperty(JSON_PROPERTY_TRANSMISSION_SIG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransmissionSig(String transmissionSig) {
    this.transmissionSig = transmissionSig;
  }


  public VerifyWebhookSignature transmissionTime(OffsetDateTime transmissionTime) {
    this.transmissionTime = transmissionTime;
    return this;
  }

   /**
   * The date and time of the HTTP transmission, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Appears in the &#x60;PAYPAL-TRANSMISSION-TIME&#x60; header of the notification message.
   * @return transmissionTime
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANSMISSION_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getTransmissionTime() {
    return transmissionTime;
  }


  @JsonProperty(JSON_PROPERTY_TRANSMISSION_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransmissionTime(OffsetDateTime transmissionTime) {
    this.transmissionTime = transmissionTime;
  }


  public VerifyWebhookSignature webhookId(String webhookId) {
    this.webhookId = webhookId;
    return this;
  }

   /**
   * The ID of the webhook as configured in your Developer Portal account.
   * @return webhookId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WEBHOOK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getWebhookId() {
    return webhookId;
  }


  @JsonProperty(JSON_PROPERTY_WEBHOOK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWebhookId(String webhookId) {
    this.webhookId = webhookId;
  }


  public VerifyWebhookSignature webhookEvent(Event webhookEvent) {
    this.webhookEvent = webhookEvent;
    return this;
  }

   /**
   * Get webhookEvent
   * @return webhookEvent
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WEBHOOK_EVENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Event getWebhookEvent() {
    return webhookEvent;
  }


  @JsonProperty(JSON_PROPERTY_WEBHOOK_EVENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWebhookEvent(Event webhookEvent) {
    this.webhookEvent = webhookEvent;
  }


  /**
   * Return true if this verify_webhook_signature object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyWebhookSignature verifyWebhookSignature = (VerifyWebhookSignature) o;
    return Objects.equals(this.authAlgo, verifyWebhookSignature.authAlgo) &&
        Objects.equals(this.certUrl, verifyWebhookSignature.certUrl) &&
        Objects.equals(this.transmissionId, verifyWebhookSignature.transmissionId) &&
        Objects.equals(this.transmissionSig, verifyWebhookSignature.transmissionSig) &&
        Objects.equals(this.transmissionTime, verifyWebhookSignature.transmissionTime) &&
        Objects.equals(this.webhookId, verifyWebhookSignature.webhookId) &&
        Objects.equals(this.webhookEvent, verifyWebhookSignature.webhookEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authAlgo, certUrl, transmissionId, transmissionSig, transmissionTime, webhookId, webhookEvent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyWebhookSignature {\n");
    sb.append("    authAlgo: ").append(toIndentedString(authAlgo)).append("\n");
    sb.append("    certUrl: ").append(toIndentedString(certUrl)).append("\n");
    sb.append("    transmissionId: ").append(toIndentedString(transmissionId)).append("\n");
    sb.append("    transmissionSig: ").append(toIndentedString(transmissionSig)).append("\n");
    sb.append("    transmissionTime: ").append(toIndentedString(transmissionTime)).append("\n");
    sb.append("    webhookId: ").append(toIndentedString(webhookId)).append("\n");
    sb.append("    webhookEvent: ").append(toIndentedString(webhookEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `auth_algo` to the URL query string
    if (getAuthAlgo() != null) {
      joiner.add(String.format("%sauth_algo%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAuthAlgo()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cert_url` to the URL query string
    if (getCertUrl() != null) {
      joiner.add(String.format("%scert_url%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCertUrl()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `transmission_id` to the URL query string
    if (getTransmissionId() != null) {
      joiner.add(String.format("%stransmission_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTransmissionId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `transmission_sig` to the URL query string
    if (getTransmissionSig() != null) {
      joiner.add(String.format("%stransmission_sig%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTransmissionSig()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `transmission_time` to the URL query string
    if (getTransmissionTime() != null) {
      joiner.add(String.format("%stransmission_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTransmissionTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `webhook_id` to the URL query string
    if (getWebhookId() != null) {
      joiner.add(String.format("%swebhook_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWebhookId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `webhook_event` to the URL query string
    if (getWebhookEvent() != null) {
      joiner.add(getWebhookEvent().toUrlQueryString(prefix + "webhook_event" + suffix));
    }

    return joiner.toString();
  }
}

