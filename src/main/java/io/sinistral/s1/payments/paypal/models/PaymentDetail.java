/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.sinistral.s1.payments.paypal.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;


/**
 * The payment details of the invoice. Includes payment type, method, date, discount, and transaction type.
 */
@JsonPropertyOrder({
  PaymentDetail.JSON_PROPERTY_TYPE,
  PaymentDetail.JSON_PROPERTY_PAYMENT_ID,
  PaymentDetail.JSON_PROPERTY_PAYMENT_DATE,
  PaymentDetail.JSON_PROPERTY_METHOD,
  PaymentDetail.JSON_PROPERTY_NOTE,
  PaymentDetail.JSON_PROPERTY_AMOUNT,
  PaymentDetail.JSON_PROPERTY_SHIPPING_INFO
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-21T16:02:23.639524-07:00[America/Los_Angeles]")
public class PaymentDetail {
  public static final String JSON_PROPERTY_TYPE = "type";
  private PaymentType type;

  public static final String JSON_PROPERTY_PAYMENT_ID = "payment_id";
  private String paymentId;

  public static final String JSON_PROPERTY_PAYMENT_DATE = "payment_date";
  private String paymentDate;

  public static final String JSON_PROPERTY_METHOD = "method";
  private PaymentMethod method;

  public static final String JSON_PROPERTY_NOTE = "note";
  private String note;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private Money amount;

  public static final String JSON_PROPERTY_SHIPPING_INFO = "shipping_info";
  private ContactNameAddress shippingInfo;

  public PaymentDetail() { 
  }

  public PaymentDetail type(PaymentType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PaymentType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(PaymentType type) {
    this.type = type;
  }


  public PaymentDetail paymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

   /**
   * The ID for a PayPal payment transaction. Required for the &#x60;PAYPAL&#x60; payment type.
   * @return paymentId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentId() {
    return paymentId;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentId(String paymentId) {
    this.paymentId = paymentId;
  }


  public PaymentDetail paymentDate(String paymentDate) {
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard &#x60;date_time&#x60; type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
   * @return paymentDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentDate() {
    return paymentDate;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentDate(String paymentDate) {
    this.paymentDate = paymentDate;
  }


  public PaymentDetail method(PaymentMethod method) {
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PaymentMethod getMethod() {
    return method;
  }


  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMethod(PaymentMethod method) {
    this.method = method;
  }


  public PaymentDetail note(String note) {
    this.note = note;
    return this;
  }

   /**
   * A note associated with an external cash or check payment.
   * @return note
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNote() {
    return note;
  }


  @JsonProperty(JSON_PROPERTY_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNote(String note) {
    this.note = note;
  }


  public PaymentDetail amount(Money amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(Money amount) {
    this.amount = amount;
  }


  public PaymentDetail shippingInfo(ContactNameAddress shippingInfo) {
    this.shippingInfo = shippingInfo;
    return this;
  }

   /**
   * Get shippingInfo
   * @return shippingInfo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIPPING_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ContactNameAddress getShippingInfo() {
    return shippingInfo;
  }


  @JsonProperty(JSON_PROPERTY_SHIPPING_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShippingInfo(ContactNameAddress shippingInfo) {
    this.shippingInfo = shippingInfo;
  }


  /**
   * Return true if this payment_detail object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentDetail paymentDetail = (PaymentDetail) o;
    return Objects.equals(this.type, paymentDetail.type) &&
        Objects.equals(this.paymentId, paymentDetail.paymentId) &&
        Objects.equals(this.paymentDate, paymentDetail.paymentDate) &&
        Objects.equals(this.method, paymentDetail.method) &&
        Objects.equals(this.note, paymentDetail.note) &&
        Objects.equals(this.amount, paymentDetail.amount) &&
        Objects.equals(this.shippingInfo, paymentDetail.shippingInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, paymentId, paymentDate, method, note, amount, shippingInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentDetail {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    shippingInfo: ").append(toIndentedString(shippingInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `payment_id` to the URL query string
    if (getPaymentId() != null) {
      joiner.add(String.format("%spayment_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `payment_date` to the URL query string
    if (getPaymentDate() != null) {
      joiner.add(String.format("%spayment_date%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentDate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `method` to the URL query string
    if (getMethod() != null) {
      joiner.add(String.format("%smethod%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMethod()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `note` to the URL query string
    if (getNote() != null) {
      joiner.add(String.format("%snote%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNote()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      joiner.add(getAmount().toUrlQueryString(prefix + "amount" + suffix));
    }

    // add `shipping_info` to the URL query string
    if (getShippingInfo() != null) {
      joiner.add(getShippingInfo().toUrlQueryString(prefix + "shipping_info" + suffix));
    }

    return joiner.toString();
  }
}

