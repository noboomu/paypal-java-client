/*
 * Invoices
 * Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.sinistral.s1.payments.paypal.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;


/**
 * The name of the party.
 */
@JsonPropertyOrder({
  Name.JSON_PROPERTY_PREFIX,
  Name.JSON_PROPERTY_GIVEN_NAME,
  Name.JSON_PROPERTY_SURNAME,
  Name.JSON_PROPERTY_MIDDLE_NAME,
  Name.JSON_PROPERTY_SUFFIX,
  Name.JSON_PROPERTY_ALTERNATE_FULL_NAME,
  Name.JSON_PROPERTY_FULL_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-21T16:02:23.639524-07:00[America/Los_Angeles]")
public class Name {
  public static final String JSON_PROPERTY_PREFIX = "prefix";
  private String prefix;

  public static final String JSON_PROPERTY_GIVEN_NAME = "given_name";
  private String givenName;

  public static final String JSON_PROPERTY_SURNAME = "surname";
  private String surname;

  public static final String JSON_PROPERTY_MIDDLE_NAME = "middle_name";
  private String middleName;

  public static final String JSON_PROPERTY_SUFFIX = "suffix";
  private String suffix;

  public static final String JSON_PROPERTY_ALTERNATE_FULL_NAME = "alternate_full_name";
  private String alternateFullName;

  public static final String JSON_PROPERTY_FULL_NAME = "full_name";
  private String fullName;

  public Name() { 
  }

  public Name prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

   /**
   * The prefix, or title, to the party&#39;s name.
   * @return prefix
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrefix() {
    return prefix;
  }


  @JsonProperty(JSON_PROPERTY_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  public Name givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

   /**
   * When the party is a person, the party&#39;s given, or first, name.
   * @return givenName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GIVEN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGivenName() {
    return givenName;
  }


  @JsonProperty(JSON_PROPERTY_GIVEN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public Name surname(String surname) {
    this.surname = surname;
    return this;
  }

   /**
   * When the party is a person, the party&#39;s surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother&#39;s, surname.
   * @return surname
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SURNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSurname() {
    return surname;
  }


  @JsonProperty(JSON_PROPERTY_SURNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSurname(String surname) {
    this.surname = surname;
  }


  public Name middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

   /**
   * When the party is a person, the party&#39;s middle name. Use also to store multiple middle names including the patronymic, or father&#39;s, middle name.
   * @return middleName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIDDLE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMiddleName() {
    return middleName;
  }


  @JsonProperty(JSON_PROPERTY_MIDDLE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public Name suffix(String suffix) {
    this.suffix = suffix;
    return this;
  }

   /**
   * The suffix for the party&#39;s name.
   * @return suffix
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSuffix() {
    return suffix;
  }


  @JsonProperty(JSON_PROPERTY_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuffix(String suffix) {
    this.suffix = suffix;
  }


  public Name alternateFullName(String alternateFullName) {
    this.alternateFullName = alternateFullName;
    return this;
  }

   /**
   * DEPRECATED. The party&#39;s alternate name. Can be a business name, nickname, or any other name that cannot be split into first, last name. Required when the party is a business.
   * @return alternateFullName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALTERNATE_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlternateFullName() {
    return alternateFullName;
  }


  @JsonProperty(JSON_PROPERTY_ALTERNATE_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlternateFullName(String alternateFullName) {
    this.alternateFullName = alternateFullName;
  }


  public Name fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

   /**
   * When the party is a person, the party&#39;s full name.
   * @return fullName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFullName() {
    return fullName;
  }


  @JsonProperty(JSON_PROPERTY_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  /**
   * Return true if this name object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Name name = (Name) o;
    return Objects.equals(this.prefix, name.prefix) &&
        Objects.equals(this.givenName, name.givenName) &&
        Objects.equals(this.surname, name.surname) &&
        Objects.equals(this.middleName, name.middleName) &&
        Objects.equals(this.suffix, name.suffix) &&
        Objects.equals(this.alternateFullName, name.alternateFullName) &&
        Objects.equals(this.fullName, name.fullName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prefix, givenName, surname, middleName, suffix, alternateFullName, fullName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Name {\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    alternateFullName: ").append(toIndentedString(alternateFullName)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `prefix` to the URL query string
    if (getPrefix() != null) {
      joiner.add(String.format("%sprefix%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPrefix()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `given_name` to the URL query string
    if (getGivenName() != null) {
      joiner.add(String.format("%sgiven_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGivenName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `surname` to the URL query string
    if (getSurname() != null) {
      joiner.add(String.format("%ssurname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSurname()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `middle_name` to the URL query string
    if (getMiddleName() != null) {
      joiner.add(String.format("%smiddle_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMiddleName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `suffix` to the URL query string
    if (getSuffix() != null) {
      joiner.add(String.format("%ssuffix%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSuffix()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `alternate_full_name` to the URL query string
    if (getAlternateFullName() != null) {
      joiner.add(String.format("%salternate_full_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlternateFullName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `full_name` to the URL query string
    if (getFullName() != null) {
      joiner.add(String.format("%sfull_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFullName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

